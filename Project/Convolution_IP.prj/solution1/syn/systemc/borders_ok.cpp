// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "borders_ok.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic borders_ok::ap_const_logic_1 = sc_dt::Log_1;
const bool borders_ok::ap_const_boolean_1 = true;
const sc_lv<10> borders_ok::ap_const_lv10_0 = "0000000000";
const sc_lv<32> borders_ok::ap_const_lv32_8 = "1000";
const sc_lv<32> borders_ok::ap_const_lv32_9 = "1001";
const sc_lv<2> borders_ok::ap_const_lv2_1 = "1";
const sc_lv<9> borders_ok::ap_const_lv9_0 = "000000000";
const sc_logic borders_ok::ap_const_logic_0 = sc_dt::Log_0;

borders_ok::borders_ok(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp2_fu_60_p2 );
    sensitive << ( tmp_fu_54_p2 );

    SC_METHOD(thread_icmp_fu_48_p2);
    sensitive << ( tmp_2826_fu_38_p4 );

    SC_METHOD(thread_tmp2_fu_60_p2);
    sensitive << ( tmp_1_fu_32_p2 );
    sensitive << ( icmp_fu_48_p2 );

    SC_METHOD(thread_tmp_1_fu_32_p2);
    sensitive << ( x );

    SC_METHOD(thread_tmp_2826_fu_38_p4);
    sensitive << ( x );

    SC_METHOD(thread_tmp_fu_54_p2);
    sensitive << ( y );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "borders_ok_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_2826_fu_38_p4, "tmp_2826_fu_38_p4");
    sc_trace(mVcdFile, tmp_1_fu_32_p2, "tmp_1_fu_32_p2");
    sc_trace(mVcdFile, icmp_fu_48_p2, "icmp_fu_48_p2");
    sc_trace(mVcdFile, tmp2_fu_60_p2, "tmp2_fu_60_p2");
    sc_trace(mVcdFile, tmp_fu_54_p2, "tmp_fu_54_p2");
#endif

    }
}

borders_ok::~borders_ok() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void borders_ok::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void borders_ok::thread_ap_return() {
    ap_return = (tmp2_fu_60_p2.read() & tmp_fu_54_p2.read());
}

void borders_ok::thread_icmp_fu_48_p2() {
    icmp_fu_48_p2 = (!tmp_2826_fu_38_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2826_fu_38_p4.read() != ap_const_lv2_1);
}

void borders_ok::thread_tmp2_fu_60_p2() {
    tmp2_fu_60_p2 = (tmp_1_fu_32_p2.read() & icmp_fu_48_p2.read());
}

void borders_ok::thread_tmp_1_fu_32_p2() {
    tmp_1_fu_32_p2 = (!x.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): (sc_bigint<10>(x.read()) > sc_bigint<10>(ap_const_lv10_0));
}

void borders_ok::thread_tmp_2826_fu_38_p4() {
    tmp_2826_fu_38_p4 = x.read().range(9, 8);
}

void borders_ok::thread_tmp_fu_54_p2() {
    tmp_fu_54_p2 = (!y.read().is_01() || !ap_const_lv9_0.is_01())? sc_lv<1>(): (sc_bigint<9>(y.read()) > sc_bigint<9>(ap_const_lv9_0));
}

}

