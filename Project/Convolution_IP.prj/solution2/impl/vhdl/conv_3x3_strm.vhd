-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_3x3_strm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC );
end;


architecture behav of conv_3x3_strm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_3x3_strm,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.828000,HLS_SYN_LAT=65804,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=351,HLS_SYN_LUT=1107}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_FE : STD_LOGIC_VECTOR (8 downto 0) := "011111110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv64_FE : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111110";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv32_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000010";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_exitcond_flatten_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond2_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp1_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_252 : STD_LOGIC_VECTOR (8 downto 0);
    signal x1_reg_264 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_276 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_assign_reg_287 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_assign_reg_299 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_1_fu_316_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_reg_888 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond2_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal x_2_fu_333_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_2_reg_897 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal rev_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal rev1_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond_flatten_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_exitcond_flatten_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_421_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal exitcond_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_mid2_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_mid2_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_assign_mid2_fu_455_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_assign_mid2_reg_1018 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_1028 : STD_LOGIC_VECTOR (8 downto 0);
    signal brmerge_demorgan_i_0_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_0_1_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_0_2_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_0_2_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buf_0_addr_3_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_1_addr_3_reg_1050 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_1_1_load_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal brmerge_demorgan_i_1_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_1_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_1_fu_646_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_1_reg_1067 : STD_LOGIC_VECTOR (10 downto 0);
    signal brmerge_demorgan_i_2_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_2_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_brmerge_demorgan_i_2_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_2_2_fu_778_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_2_2_reg_1082 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_848_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1087 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal line_buf_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_0_ce0 : STD_LOGIC;
    signal line_buf_0_we0 : STD_LOGIC;
    signal line_buf_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_0_ce1 : STD_LOGIC;
    signal line_buf_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_1_ce0 : STD_LOGIC;
    signal line_buf_1_we0 : STD_LOGIC;
    signal line_buf_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_1_ce1 : STD_LOGIC;
    signal line_buf_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_x_phi_fu_256_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_x1_phi_fu_268_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_y_assign_phi_fu_291_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_x_assign_phi_fu_303_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal read_count_1_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_count_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_0_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_0_1_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_1_1_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_0_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_0_1_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_1_1_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_1_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_assign_2_fu_395_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_mid1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_mid2_fu_433_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_2_fu_501_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_assign_2_mid1_fu_553_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_cast_fu_583_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond1_i_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_587_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_2_i_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_0_2_cast_fu_608_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_2_i_0_0_s_fu_601_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_0_2_fu_612_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_2_i_0_2_fu_618_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i1_mid2_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_634_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_2_i_0_2_cast_fu_625_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_642_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i2_mid2_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_658_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_1_2_fu_733_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_1_2_cast_fu_740_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_2_i_1_0_s_fu_727_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_1_2_fu_744_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_2_i_1_2_fu_750_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_2_cast_fu_757_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_2_fu_761_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_2_2_cast_fu_774_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_2_i_2_0_s_fu_767_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_2_i_2_2_fu_802_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_neg_fu_816_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_822_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_808_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_838_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_856_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_872_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component conv_3x3_strm_linbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buf_0_U : component conv_3x3_strm_linbkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_0_address0,
        ce0 => line_buf_0_ce0,
        we0 => line_buf_0_we0,
        d0 => line_buf_0_d0,
        q0 => line_buf_0_q0,
        address1 => line_buf_0_address1,
        ce1 => line_buf_0_ce1,
        q1 => line_buf_0_q1);

    line_buf_1_U : component conv_3x3_strm_linbkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_1_address0,
        ce0 => line_buf_1_ce0,
        we0 => line_buf_1_we0,
        d0 => in_stream_V_dout,
        q0 => line_buf_1_q0,
        address1 => line_buf_1_address1,
        ce1 => line_buf_1_ce1,
        q1 => line_buf_1_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_276 <= indvar_flatten_next_fu_421_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_276 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    read_count_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                read_count_1_fu_122 <= read_count_fu_680_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                read_count_1_fu_122 <= ap_const_lv32_102;
            end if; 
        end if;
    end process;

    window_1_0_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_1_0_fu_142 <= window_1_1_1_fu_138;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_1_0_fu_142 <= line_buf_0_q0;
            end if; 
        end if;
    end process;

    window_1_1_1_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_1_1_1_fu_138 <= line_buf_1_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_1_1_1_fu_138 <= line_buf_0_q1;
            end if; 
        end if;
    end process;

    window_2_0_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_reg_1078 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_2_0_fu_154 <= window_2_1_1_fu_150;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_2_0_fu_154 <= line_buf_1_q0;
            end if; 
        end if;
    end process;

    window_2_1_1_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_reg_1078 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_2_1_1_fu_150 <= in_stream_V_dout;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                window_2_1_1_fu_150 <= line_buf_1_q1;
            end if; 
        end if;
    end process;

    x1_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                x1_reg_264 <= ap_const_lv9_0;
            elsif (((exitcond2_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                x1_reg_264 <= x_2_reg_897;
            end if; 
        end if;
    end process;

    x_assign_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                x_assign_reg_299 <= j_reg_1028;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_assign_reg_299 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_252 <= x_1_reg_888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_252 <= ap_const_lv9_FE;
            end if; 
        end if;
    end process;

    y_assign_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                y_assign_reg_287 <= y_assign_mid2_reg_1018;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                y_assign_reg_287 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                ap_reg_pp2_iter1_exitcond_flatten_reg_998 <= exitcond_flatten_reg_998;
                ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050 <= line_buf_1_addr_3_reg_1050;
                exitcond_flatten_reg_998 <= exitcond_flatten_fu_415_p2;
                rev1_reg_992 <= rev1_fu_409_p2;
                rev_reg_987 <= rev_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                ap_reg_pp2_iter2_brmerge_demorgan_i_2_reg_1072 <= brmerge_demorgan_i_2_reg_1072;
                ap_reg_pp2_iter2_exitcond_flatten_reg_998 <= ap_reg_pp2_iter1_exitcond_flatten_reg_998;
                ap_reg_pp2_iter3_exitcond_flatten_reg_998 <= ap_reg_pp2_iter2_exitcond_flatten_reg_998;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                brmerge_demorgan_i_0_1_reg_1033 <= brmerge_demorgan_i_0_1_fu_495_p2;
                brmerge_demorgan_i_0_2_reg_1038 <= brmerge_demorgan_i_0_2_fu_521_p2;
                exitcond_reg_1007 <= exitcond_fu_427_p2;
                line_buf_0_addr_3_reg_1044 <= tmp_s_fu_527_p1(8 - 1 downto 0);
                line_buf_1_addr_3_reg_1050 <= tmp_s_fu_527_p1(8 - 1 downto 0);
                tmp_1_i_reg_1023 <= tmp_1_i_fu_463_p2;
                tmp_i_mid2_reg_1013 <= tmp_i_mid2_fu_447_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                brmerge_demorgan_i_1_reg_1061 <= brmerge_demorgan_i_1_fu_629_p2;
                brmerge_demorgan_i_2_reg_1072 <= brmerge_demorgan_i_2_fu_652_p2;
                icmp1_reg_1078 <= icmp1_fu_668_p2;
                result_1_reg_1067 <= result_1_fu_646_p2;
                window_1_1_1_load_reg_1056 <= window_1_1_1_fu_138;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond1_reg_884 <= exitcond1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond2_reg_893 <= exitcond2_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp2_iter2_exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_reg_1093 <= icmp_fu_866_p2;
                tmp_14_reg_1087 <= tmp_14_fu_848_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                j_reg_1028 <= j_fu_469_p2;
                y_assign_mid2_reg_1018 <= y_assign_mid2_fu_455_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_i_2_reg_1072 = ap_const_lv1_1) and (ap_reg_pp2_iter1_exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                result_2_2_reg_1082 <= result_2_2_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                window_0_0_1_fu_134 <= window_0_0_fu_130;
                window_0_0_fu_130 <= window_0_1_fu_126;
                window_0_1_fu_126 <= line_buf_0_q1;
                window_1_0_1_fu_146 <= window_1_0_fu_142;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp1_reg_1078 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                window_2_0_1_fu_158 <= window_2_0_fu_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_1_reg_888 <= x_1_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                x_2_reg_897 <= x_2_fu_333_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp2_iter4, exitcond1_fu_310_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_327_p2, ap_enable_reg_pp1_iter0, exitcond_flatten_fu_415_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond1_fu_310_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond1_fu_310_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((exitcond2_fu_327_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((exitcond2_fu_327_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((exitcond_flatten_fu_415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((exitcond_flatten_fu_415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond1_reg_884)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond1_reg_884 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond1_reg_884)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond1_reg_884 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp1_iter1, exitcond2_reg_893)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond2_reg_893 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp1_iter1, exitcond2_reg_893)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond2_reg_893 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(out_stream_V_full_n, in_stream_V_empty_n, ap_enable_reg_pp2_iter4, ap_reg_pp2_iter3_exitcond_flatten_reg_998, ap_enable_reg_pp2_iter2, icmp1_reg_1078)
    begin
                ap_block_pp2_stage0_01001 <= (((icmp1_reg_1078 = ap_const_lv1_1) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(out_stream_V_full_n, in_stream_V_empty_n, ap_enable_reg_pp2_iter4, ap_reg_pp2_iter3_exitcond_flatten_reg_998, ap_enable_reg_pp2_iter2, icmp1_reg_1078)
    begin
                ap_block_pp2_stage0_11001 <= (((icmp1_reg_1078 = ap_const_lv1_1) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(out_stream_V_full_n, in_stream_V_empty_n, ap_enable_reg_pp2_iter4, ap_reg_pp2_iter3_exitcond_flatten_reg_998, ap_enable_reg_pp2_iter2, icmp1_reg_1078)
    begin
                ap_block_pp2_stage0_subdone <= (((icmp1_reg_1078 = ap_const_lv1_1) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp2_stage0_iter2_assign_proc : process(in_stream_V_empty_n, icmp1_reg_1078)
    begin
                ap_block_state11_pp2_stage0_iter2 <= ((icmp1_reg_1078 = ap_const_lv1_1) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state12_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp2_stage0_iter4_assign_proc : process(out_stream_V_full_n, ap_reg_pp2_iter3_exitcond_flatten_reg_998)
    begin
                ap_block_state13_pp2_stage0_iter4 <= ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_empty_n, exitcond1_reg_884)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond1_reg_884 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(in_stream_V_empty_n, exitcond2_reg_893)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((exitcond2_reg_893 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_310_p2)
    begin
        if ((exitcond1_fu_310_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(exitcond2_fu_327_p2)
    begin
        if ((exitcond2_fu_327_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(exitcond_flatten_fu_415_p2)
    begin
        if ((exitcond_flatten_fu_415_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x1_phi_fu_268_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond2_reg_893, x1_reg_264, x_2_reg_897)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_x1_phi_fu_268_p4 <= x_2_reg_897;
        else 
            ap_phi_mux_x1_phi_fu_268_p4 <= x1_reg_264;
        end if; 
    end process;


    ap_phi_mux_x_assign_phi_fu_303_p4_assign_proc : process(ap_block_pp2_stage0, exitcond_flatten_reg_998, x_assign_reg_299, ap_CS_fsm_pp2_stage0, j_reg_1028, ap_enable_reg_pp2_iter1)
    begin
        if (((exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_assign_phi_fu_303_p4 <= j_reg_1028;
        else 
            ap_phi_mux_x_assign_phi_fu_303_p4 <= x_assign_reg_299;
        end if; 
    end process;


    ap_phi_mux_x_phi_fu_256_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_884, x_reg_252, x_1_reg_888)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_reg_884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_x_phi_fu_256_p4 <= x_1_reg_888;
        else 
            ap_phi_mux_x_phi_fu_256_p4 <= x_reg_252;
        end if; 
    end process;


    ap_phi_mux_y_assign_phi_fu_291_p4_assign_proc : process(ap_block_pp2_stage0, exitcond_flatten_reg_998, y_assign_reg_287, ap_CS_fsm_pp2_stage0, y_assign_mid2_reg_1018, ap_enable_reg_pp2_iter1)
    begin
        if (((exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_y_assign_phi_fu_291_p4 <= y_assign_mid2_reg_1018;
        else 
            ap_phi_mux_y_assign_phi_fu_291_p4 <= y_assign_reg_287;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_demorgan_i_0_1_fu_495_p2 <= (tmp_i_mid2_fu_447_p3 and tmp1_fu_489_p2);
    brmerge_demorgan_i_0_2_fu_521_p2 <= (rev4_fu_515_p2 and brmerge_demorgan_i_0_1_fu_495_p2);
    brmerge_demorgan_i_1_fu_629_p2 <= (tmp_i1_mid2_fu_548_p3 and brmerge_demorgan_i_0_2_reg_1038);
    brmerge_demorgan_i_2_fu_652_p2 <= (tmp_i2_mid2_fu_573_p3 and brmerge_demorgan_i_1_fu_629_p2);
    exitcond1_fu_310_p2 <= "1" when (ap_phi_mux_x_phi_fu_256_p4 = ap_const_lv9_100) else "0";
    exitcond2_fu_327_p2 <= "1" when (ap_phi_mux_x1_phi_fu_268_p4 = ap_const_lv9_100) else "0";
    exitcond_flatten_fu_415_p2 <= "1" when (indvar_flatten_reg_276 = ap_const_lv17_10000) else "0";
    exitcond_fu_427_p2 <= "1" when (ap_phi_mux_x_assign_phi_fu_303_p4 = ap_const_lv9_100) else "0";
    i_fu_375_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_assign_phi_fu_291_p4) + unsigned(ap_const_lv9_1));
    icmp1_fu_668_p2 <= "1" when (signed(tmp_21_fu_658_p4) < signed(ap_const_lv16_1)) else "0";
    icmp_fu_866_p2 <= "1" when (signed(tmp_19_fu_856_p4) > signed(ap_const_lv9_0)) else "0";

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_block_pp2_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_884, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond2_reg_893, ap_enable_reg_pp2_iter2, icmp1_reg_1078)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_reg_884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp1_reg_1078 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_884, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_893, ap_enable_reg_pp2_iter2, icmp1_reg_1078, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((icmp1_reg_1078 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((exitcond2_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((exitcond1_reg_884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_421_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_276) + unsigned(ap_const_lv17_1));
    j_fu_469_p2 <= std_logic_vector(unsigned(x_assign_mid2_fu_433_p3) + unsigned(ap_const_lv9_1));

    line_buf_0_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, line_buf_0_addr_3_reg_1044, ap_enable_reg_pp2_iter1, tmp_1_fu_322_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_0_address0 <= line_buf_0_addr_3_reg_1044;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buf_0_address0 <= ap_const_lv64_FE(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_0_address0 <= tmp_1_fu_322_p1(8 - 1 downto 0);
        else 
            line_buf_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_0_address1_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, tmp_s_fu_527_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_0_address1 <= tmp_s_fu_527_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buf_0_address1 <= ap_const_lv64_FF(8 - 1 downto 0);
        else 
            line_buf_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            line_buf_0_ce0 <= ap_const_logic_1;
        else 
            line_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_0_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            line_buf_0_ce1 <= ap_const_logic_1;
        else 
            line_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_0_d0_assign_proc : process(in_stream_V_dout, ap_block_pp2_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, line_buf_1_q1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_0_d0 <= line_buf_1_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_0_d0 <= in_stream_V_dout;
        else 
            line_buf_0_d0 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_0_we0_assign_proc : process(exitcond_flatten_reg_998, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_884, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((exitcond1_reg_884 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            line_buf_0_we0 <= ap_const_logic_1;
        else 
            line_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_enable_reg_pp2_iter2, ap_CS_fsm_state7, ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050, tmp_4_fu_339_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            line_buf_1_address0 <= ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buf_1_address0 <= ap_const_lv64_FE(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buf_1_address0 <= tmp_4_fu_339_p1(8 - 1 downto 0);
        else 
            line_buf_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_1_address1_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, tmp_s_fu_527_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_1_address1 <= tmp_s_fu_527_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buf_1_address1 <= ap_const_lv64_FF(8 - 1 downto 0);
        else 
            line_buf_1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buf_1_ce0 <= ap_const_logic_1;
        else 
            line_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            line_buf_1_ce1 <= ap_const_logic_1;
        else 
            line_buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_reg_893, ap_enable_reg_pp2_iter2, icmp1_reg_1078, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((icmp1_reg_1078 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((exitcond2_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buf_1_we0 <= ap_const_logic_1;
        else 
            line_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond1_i_fu_579_p2 <= (tmp_i_mid2_reg_1013 and tmp_1_i_reg_1023);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, ap_reg_pp2_iter3_exitcond_flatten_reg_998)
    begin
        if (((ap_reg_pp2_iter3_exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= 
        tmp_14_reg_1087 when (icmp_reg_1093(0) = '1') else 
        tmp_15_fu_872_p2;

    out_stream_V_write_assign_proc : process(ap_enable_reg_pp2_iter4, ap_reg_pp2_iter3_exitcond_flatten_reg_998, ap_block_pp2_stage0_11001)
    begin
        if (((ap_reg_pp2_iter3_exitcond_flatten_reg_998 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_neg_fu_816_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(result_2_i_2_2_fu_802_p3));
    p_shl_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_634_p3),11));
    p_shl_fu_634_p3 <= (window_1_0_1_fu_146 & ap_const_lv1_0);
    read_count_fu_680_p2 <= std_logic_vector(unsigned(read_count_1_fu_122) + unsigned(ap_const_lv32_1));
    result_0_2_fu_612_p2 <= std_logic_vector(unsigned(tmp_15_0_2_cast_fu_608_p1) + unsigned(result_2_i_0_0_s_fu_601_p3));
    result_1_2_fu_744_p2 <= std_logic_vector(unsigned(tmp_16_1_2_cast_fu_740_p1) + unsigned(result_2_i_1_0_s_fu_727_p3));
    result_1_fu_646_p2 <= std_logic_vector(signed(result_2_i_0_2_cast_fu_625_p1) - signed(p_shl_cast_fu_642_p1));
    result_2_2_fu_778_p2 <= std_logic_vector(unsigned(tmp_15_2_2_cast_fu_774_p1) + unsigned(result_2_i_2_0_s_fu_767_p3));
    result_2_fu_761_p2 <= std_logic_vector(unsigned(result_2_i_1_2_fu_750_p3) - unsigned(tmp_15_2_cast_fu_757_p1));
    result_2_i_0_0_s_fu_601_p3 <= 
        result_2_i_fu_593_p3 when (brmerge_demorgan_i_0_1_reg_1033(0) = '1') else 
        ap_const_lv9_0;
        result_2_i_0_2_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_2_i_0_2_fu_618_p3),11));

    result_2_i_0_2_fu_618_p3 <= 
        result_0_2_fu_612_p2 when (brmerge_demorgan_i_0_2_reg_1038(0) = '1') else 
        ap_const_lv9_0;
    result_2_i_1_0_s_fu_727_p3 <= 
        result_1_reg_1067 when (brmerge_demorgan_i_1_reg_1061(0) = '1') else 
        ap_const_lv11_0;
    result_2_i_1_2_fu_750_p3 <= 
        result_1_2_fu_744_p2 when (brmerge_demorgan_i_1_reg_1061(0) = '1') else 
        ap_const_lv11_0;
    result_2_i_2_0_s_fu_767_p3 <= 
        result_2_fu_761_p2 when (brmerge_demorgan_i_2_reg_1072(0) = '1') else 
        ap_const_lv11_0;
    result_2_i_2_2_fu_802_p3 <= 
        result_2_2_reg_1082 when (ap_reg_pp2_iter2_brmerge_demorgan_i_2_reg_1072(0) = '1') else 
        ap_const_lv11_0;
    result_2_i_fu_593_p3 <= 
        tmp_8_fu_587_p2 when (or_cond1_i_fu_579_p2(0) = '1') else 
        ap_const_lv9_0;
    rev1_fu_409_p2 <= (tmp_6_fu_401_p3 xor ap_const_lv1_1);
    rev2_fu_567_p2 <= (tmp_10_fu_559_p3 xor ap_const_lv1_1);
    rev3_fu_483_p2 <= (tmp_16_fu_475_p3 xor ap_const_lv1_1);
    rev4_fu_515_p2 <= (tmp_17_fu_507_p3 xor ap_const_lv1_1);
    rev_fu_389_p2 <= (tmp_3_fu_381_p3 xor ap_const_lv1_1);
    tmp1_fu_489_p2 <= (tmp_1_i_fu_463_p2 and rev3_fu_483_p2);
    tmp_10_fu_559_p3 <= y_assign_2_mid1_fu_553_p2(8 downto 8);
    tmp_11_fu_822_p4 <= p_neg_fu_816_p2(9 downto 2);
    tmp_12_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_11_fu_822_p4));
    tmp_13_fu_838_p4 <= result_2_i_2_2_fu_802_p3(9 downto 2);
    tmp_14_fu_848_p3 <= 
        tmp_12_fu_832_p2 when (tmp_18_fu_808_p3(0) = '1') else 
        tmp_13_fu_838_p4;
    tmp_151_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_0_0_1_fu_134),9));
    tmp_15_0_2_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_0_1_fu_126),9));
    tmp_15_2_2_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_2_1_1_fu_150),11));
    tmp_15_2_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_2_0_1_fu_158),11));
    tmp_15_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_14_reg_1087));
    tmp_16_1_2_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_1_2_fu_733_p3),11));
    tmp_16_1_2_fu_733_p3 <= (window_1_1_1_load_reg_1056 & ap_const_lv1_0);
    tmp_16_fu_475_p3 <= j_fu_469_p2(8 downto 8);
    tmp_17_fu_507_p3 <= x_assign_2_fu_501_p2(8 downto 8);
    tmp_18_fu_808_p3 <= result_2_i_2_2_fu_802_p3(10 downto 10);
    tmp_19_fu_856_p4 <= result_2_i_2_2_fu_802_p3(10 downto 2);
    tmp_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_252),64));
    tmp_1_i_fu_463_p2 <= "0" when (x_assign_mid2_fu_433_p3 = ap_const_lv9_0) else "1";
    tmp_21_fu_658_p4 <= read_count_1_fu_122(31 downto 16);
    tmp_3_fu_381_p3 <= i_fu_375_p2(8 downto 8);
    tmp_4_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_reg_264),64));
    tmp_6_fu_401_p3 <= y_assign_2_fu_395_p2(8 downto 8);
    tmp_8_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_151_cast_fu_583_p1));
    tmp_i1_mid2_fu_548_p3 <= 
        rev1_reg_992 when (exitcond_reg_1007(0) = '1') else 
        rev_reg_987;
    tmp_i2_mid2_fu_573_p3 <= 
        rev2_fu_567_p2 when (exitcond_reg_1007(0) = '1') else 
        rev1_reg_992;
    tmp_i_fu_369_p2 <= "0" when (ap_phi_mux_y_assign_phi_fu_291_p4 = ap_const_lv9_0) else "1";
    tmp_i_mid1_fu_441_p2 <= "0" when (i_fu_375_p2 = ap_const_lv9_0) else "1";
    tmp_i_mid2_fu_447_p3 <= 
        tmp_i_mid1_fu_441_p2 when (exitcond_fu_427_p2(0) = '1') else 
        tmp_i_fu_369_p2;
    tmp_s_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_mid2_fu_433_p3),64));
    x_1_fu_316_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_phi_fu_256_p4) + unsigned(ap_const_lv9_1));
    x_2_fu_333_p2 <= std_logic_vector(unsigned(ap_phi_mux_x1_phi_fu_268_p4) + unsigned(ap_const_lv9_1));
    x_assign_2_fu_501_p2 <= std_logic_vector(unsigned(x_assign_mid2_fu_433_p3) + unsigned(ap_const_lv9_2));
    x_assign_mid2_fu_433_p3 <= 
        ap_const_lv9_0 when (exitcond_fu_427_p2(0) = '1') else 
        ap_phi_mux_x_assign_phi_fu_303_p4;
    y_assign_2_fu_395_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_assign_phi_fu_291_p4) + unsigned(ap_const_lv9_2));
    y_assign_2_mid1_fu_553_p2 <= std_logic_vector(unsigned(y_assign_reg_287) + unsigned(ap_const_lv9_3));
    y_assign_mid2_fu_455_p3 <= 
        i_fu_375_p2 when (exitcond_fu_427_p2(0) = '1') else 
        ap_phi_mux_y_assign_phi_fu_291_p4;
end behav;
