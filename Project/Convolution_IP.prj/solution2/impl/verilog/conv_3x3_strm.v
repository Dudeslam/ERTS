// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_3x3_strm,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.828000,HLS_SYN_LAT=65804,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=351,HLS_SYN_LUT=1107}" *)

module conv_3x3_strm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_state4 = 8'd4;
parameter    ap_ST_fsm_pp1_stage0 = 8'd8;
parameter    ap_ST_fsm_state7 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_pp2_stage0 = 8'd64;
parameter    ap_ST_fsm_state14 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
input  [7:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_stream_V_write;
reg in_stream_V_read;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_stream_V_blk_n;
reg    ap_enable_reg_pp2_iter4;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond_flatten_reg_998;
reg   [0:0] ap_reg_pp2_iter3_exitcond_flatten_reg_998;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_884;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond2_reg_893;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp1_reg_1078;
reg   [8:0] x_reg_252;
reg   [8:0] x1_reg_264;
reg   [16:0] indvar_flatten_reg_276;
reg   [8:0] y_assign_reg_287;
reg   [8:0] x_assign_reg_299;
wire   [0:0] exitcond1_fu_310_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] x_1_fu_316_p2;
reg   [8:0] x_1_reg_888;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond2_fu_327_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [8:0] x_2_fu_333_p2;
reg   [8:0] x_2_reg_897;
reg    ap_enable_reg_pp1_iter0;
wire    ap_CS_fsm_state7;
wire   [0:0] rev_fu_389_p2;
reg   [0:0] rev_reg_987;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state10_pp2_stage0_iter1;
reg    ap_block_state11_pp2_stage0_iter2;
wire    ap_block_state12_pp2_stage0_iter3;
reg    ap_block_state13_pp2_stage0_iter4;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] rev1_fu_409_p2;
reg   [0:0] rev1_reg_992;
wire   [0:0] exitcond_flatten_fu_415_p2;
reg   [0:0] ap_reg_pp2_iter1_exitcond_flatten_reg_998;
reg   [0:0] ap_reg_pp2_iter2_exitcond_flatten_reg_998;
wire   [16:0] indvar_flatten_next_fu_421_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] exitcond_fu_427_p2;
reg   [0:0] exitcond_reg_1007;
wire   [0:0] tmp_i_mid2_fu_447_p3;
reg   [0:0] tmp_i_mid2_reg_1013;
wire   [8:0] y_assign_mid2_fu_455_p3;
reg   [8:0] y_assign_mid2_reg_1018;
wire   [0:0] tmp_1_i_fu_463_p2;
reg   [0:0] tmp_1_i_reg_1023;
wire   [8:0] j_fu_469_p2;
reg   [8:0] j_reg_1028;
wire   [0:0] brmerge_demorgan_i_0_1_fu_495_p2;
reg   [0:0] brmerge_demorgan_i_0_1_reg_1033;
wire   [0:0] brmerge_demorgan_i_0_2_fu_521_p2;
reg   [0:0] brmerge_demorgan_i_0_2_reg_1038;
reg   [7:0] line_buf_0_addr_3_reg_1044;
reg   [7:0] line_buf_1_addr_3_reg_1050;
reg   [7:0] ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050;
reg   [7:0] window_1_1_1_load_reg_1056;
wire   [0:0] brmerge_demorgan_i_1_fu_629_p2;
reg   [0:0] brmerge_demorgan_i_1_reg_1061;
wire   [10:0] result_1_fu_646_p2;
reg   [10:0] result_1_reg_1067;
wire   [0:0] brmerge_demorgan_i_2_fu_652_p2;
reg   [0:0] brmerge_demorgan_i_2_reg_1072;
reg   [0:0] ap_reg_pp2_iter2_brmerge_demorgan_i_2_reg_1072;
wire   [0:0] icmp1_fu_668_p2;
wire   [10:0] result_2_2_fu_778_p2;
reg   [10:0] result_2_2_reg_1082;
wire   [7:0] tmp_14_fu_848_p3;
reg   [7:0] tmp_14_reg_1087;
wire   [0:0] icmp_fu_866_p2;
reg   [0:0] icmp_reg_1093;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
wire    ap_CS_fsm_state8;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter3;
reg   [7:0] line_buf_0_address0;
reg    line_buf_0_ce0;
reg    line_buf_0_we0;
reg   [7:0] line_buf_0_d0;
wire   [7:0] line_buf_0_q0;
reg   [7:0] line_buf_0_address1;
reg    line_buf_0_ce1;
wire   [7:0] line_buf_0_q1;
reg   [7:0] line_buf_1_address0;
reg    line_buf_1_ce0;
reg    line_buf_1_we0;
wire   [7:0] line_buf_1_q0;
reg   [7:0] line_buf_1_address1;
reg    line_buf_1_ce1;
wire   [7:0] line_buf_1_q1;
reg   [8:0] ap_phi_mux_x_phi_fu_256_p4;
reg   [8:0] ap_phi_mux_x1_phi_fu_268_p4;
reg   [8:0] ap_phi_mux_y_assign_phi_fu_291_p4;
reg   [8:0] ap_phi_mux_x_assign_phi_fu_303_p4;
wire   [63:0] tmp_1_fu_322_p1;
wire   [63:0] tmp_4_fu_339_p1;
wire   [63:0] tmp_s_fu_527_p1;
reg    ap_block_pp2_stage0_01001;
reg   [31:0] read_count_1_fu_122;
wire   [31:0] read_count_fu_680_p2;
reg   [7:0] window_0_1_fu_126;
reg   [7:0] window_0_0_fu_130;
reg   [7:0] window_0_0_1_fu_134;
reg   [7:0] window_1_1_1_fu_138;
reg   [7:0] window_1_0_fu_142;
reg   [7:0] window_1_0_1_fu_146;
reg   [7:0] window_2_1_1_fu_150;
reg   [7:0] window_2_0_fu_154;
reg   [7:0] window_2_0_1_fu_158;
wire   [8:0] i_fu_375_p2;
wire   [0:0] tmp_3_fu_381_p3;
wire   [8:0] y_assign_2_fu_395_p2;
wire   [0:0] tmp_6_fu_401_p3;
wire   [0:0] tmp_i_mid1_fu_441_p2;
wire   [0:0] tmp_i_fu_369_p2;
wire   [8:0] x_assign_mid2_fu_433_p3;
wire   [0:0] tmp_16_fu_475_p3;
wire   [0:0] rev3_fu_483_p2;
wire   [0:0] tmp1_fu_489_p2;
wire   [8:0] x_assign_2_fu_501_p2;
wire   [0:0] tmp_17_fu_507_p3;
wire   [0:0] rev4_fu_515_p2;
wire   [8:0] y_assign_2_mid1_fu_553_p2;
wire   [0:0] tmp_10_fu_559_p3;
wire   [0:0] rev2_fu_567_p2;
wire   [8:0] tmp_151_cast_fu_583_p1;
wire   [0:0] or_cond1_i_fu_579_p2;
wire   [8:0] tmp_8_fu_587_p2;
wire   [8:0] result_2_i_fu_593_p3;
wire   [8:0] tmp_15_0_2_cast_fu_608_p1;
wire   [8:0] result_2_i_0_0_s_fu_601_p3;
wire   [8:0] result_0_2_fu_612_p2;
wire   [8:0] result_2_i_0_2_fu_618_p3;
wire   [0:0] tmp_i1_mid2_fu_548_p3;
wire   [8:0] p_shl_fu_634_p3;
wire  signed [10:0] result_2_i_0_2_cast_fu_625_p1;
wire   [10:0] p_shl_cast_fu_642_p1;
wire   [0:0] tmp_i2_mid2_fu_573_p3;
wire   [15:0] tmp_21_fu_658_p4;
wire   [8:0] tmp_16_1_2_fu_733_p3;
wire   [10:0] tmp_16_1_2_cast_fu_740_p1;
wire   [10:0] result_2_i_1_0_s_fu_727_p3;
wire   [10:0] result_1_2_fu_744_p2;
wire   [10:0] result_2_i_1_2_fu_750_p3;
wire   [10:0] tmp_15_2_cast_fu_757_p1;
wire   [10:0] result_2_fu_761_p2;
wire   [10:0] tmp_15_2_2_cast_fu_774_p1;
wire   [10:0] result_2_i_2_0_s_fu_767_p3;
wire   [10:0] result_2_i_2_2_fu_802_p3;
wire   [10:0] p_neg_fu_816_p2;
wire   [7:0] tmp_11_fu_822_p4;
wire   [0:0] tmp_18_fu_808_p3;
wire   [7:0] tmp_12_fu_832_p2;
wire   [7:0] tmp_13_fu_838_p4;
wire   [8:0] tmp_19_fu_856_p4;
wire   [7:0] tmp_15_fu_872_p2;
wire    ap_CS_fsm_state14;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
end

conv_3x3_strm_linbkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
line_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_0_address0),
    .ce0(line_buf_0_ce0),
    .we0(line_buf_0_we0),
    .d0(line_buf_0_d0),
    .q0(line_buf_0_q0),
    .address1(line_buf_0_address1),
    .ce1(line_buf_0_ce1),
    .q1(line_buf_0_q1)
);

conv_3x3_strm_linbkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
line_buf_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_1_address0),
    .ce0(line_buf_1_ce0),
    .we0(line_buf_1_we0),
    .d0(in_stream_V_dout),
    .q0(line_buf_1_q0),
    .address1(line_buf_1_address1),
    .ce1(line_buf_1_ce1),
    .q1(line_buf_1_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state9)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_415_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_276 <= indvar_flatten_next_fu_421_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_276 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_fu_668_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        read_count_1_fu_122 <= read_count_fu_680_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        read_count_1_fu_122 <= 32'd258;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_fu_668_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_1_0_fu_142 <= window_1_1_1_fu_138;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_1_0_fu_142 <= line_buf_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_fu_668_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_1_1_1_fu_138 <= line_buf_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_1_1_1_fu_138 <= line_buf_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_reg_1078 == 1'd1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_2_0_fu_154 <= window_2_1_1_fu_150;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_2_0_fu_154 <= line_buf_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_reg_1078 == 1'd1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_2_1_1_fu_150 <= in_stream_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_2_1_1_fu_150 <= line_buf_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x1_reg_264 <= 9'd0;
    end else if (((exitcond2_reg_893 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x1_reg_264 <= x_2_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_998 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        x_assign_reg_299 <= j_reg_1028;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_assign_reg_299 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_884 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_252 <= x_1_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_252 <= 9'd254;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_998 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_assign_reg_287 <= y_assign_mid2_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        y_assign_reg_287 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ap_reg_pp2_iter1_exitcond_flatten_reg_998 <= exitcond_flatten_reg_998;
        ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050 <= line_buf_1_addr_3_reg_1050;
        exitcond_flatten_reg_998 <= exitcond_flatten_fu_415_p2;
        rev1_reg_992 <= rev1_fu_409_p2;
        rev_reg_987 <= rev_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        ap_reg_pp2_iter2_brmerge_demorgan_i_2_reg_1072 <= brmerge_demorgan_i_2_reg_1072;
        ap_reg_pp2_iter2_exitcond_flatten_reg_998 <= ap_reg_pp2_iter1_exitcond_flatten_reg_998;
        ap_reg_pp2_iter3_exitcond_flatten_reg_998 <= ap_reg_pp2_iter2_exitcond_flatten_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        brmerge_demorgan_i_0_1_reg_1033 <= brmerge_demorgan_i_0_1_fu_495_p2;
        brmerge_demorgan_i_0_2_reg_1038 <= brmerge_demorgan_i_0_2_fu_521_p2;
        exitcond_reg_1007 <= exitcond_fu_427_p2;
        line_buf_0_addr_3_reg_1044 <= tmp_s_fu_527_p1;
        line_buf_1_addr_3_reg_1050 <= tmp_s_fu_527_p1;
        tmp_1_i_reg_1023 <= tmp_1_i_fu_463_p2;
        tmp_i_mid2_reg_1013 <= tmp_i_mid2_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_998 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        brmerge_demorgan_i_1_reg_1061 <= brmerge_demorgan_i_1_fu_629_p2;
        brmerge_demorgan_i_2_reg_1072 <= brmerge_demorgan_i_2_fu_652_p2;
        icmp1_reg_1078 <= icmp1_fu_668_p2;
        result_1_reg_1067 <= result_1_fu_646_p2;
        window_1_1_1_load_reg_1056 <= window_1_1_1_fu_138;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond1_reg_884 <= exitcond1_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond2_reg_893 <= exitcond2_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp2_iter2_exitcond_flatten_reg_998 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_reg_1093 <= icmp_fu_866_p2;
        tmp_14_reg_1087 <= tmp_14_fu_848_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_415_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_reg_1028 <= j_fu_469_p2;
        y_assign_mid2_reg_1018 <= y_assign_mid2_fu_455_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge_demorgan_i_2_reg_1072 == 1'd1) & (ap_reg_pp2_iter1_exitcond_flatten_reg_998 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        result_2_2_reg_1082 <= result_2_2_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_fu_668_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_0_0_1_fu_134 <= window_0_0_fu_130;
        window_0_0_fu_130 <= window_0_1_fu_126;
        window_0_1_fu_126 <= line_buf_0_q1;
        window_1_0_1_fu_146 <= window_1_0_fu_142;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp1_reg_1078 == 1'd1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_2_0_1_fu_158 <= window_2_0_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_1_reg_888 <= x_1_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x_2_reg_897 <= x_2_fu_333_p2;
    end
end

always @ (*) begin
    if ((exitcond1_fu_310_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_327_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_415_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_893 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_x1_phi_fu_268_p4 = x_2_reg_897;
    end else begin
        ap_phi_mux_x1_phi_fu_268_p4 = x1_reg_264;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_998 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_x_assign_phi_fu_303_p4 = j_reg_1028;
    end else begin
        ap_phi_mux_x_assign_phi_fu_303_p4 = x_assign_reg_299;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_884 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_x_phi_fu_256_p4 = x_1_reg_888;
    end else begin
        ap_phi_mux_x_phi_fu_256_p4 = x_reg_252;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_998 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_y_assign_phi_fu_291_p4 = y_assign_mid2_reg_1018;
    end else begin
        ap_phi_mux_y_assign_phi_fu_291_p4 = y_assign_reg_287;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_893 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_884 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp1_reg_1078 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp1_reg_1078 == 1'd1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((exitcond2_reg_893 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((exitcond1_reg_884 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_buf_0_address0 = line_buf_0_addr_3_reg_1044;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buf_0_address0 = 64'd254;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_0_address0 = tmp_1_fu_322_p1;
    end else begin
        line_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_buf_0_address1 = tmp_s_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buf_0_address1 = 64'd255;
    end else begin
        line_buf_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        line_buf_0_ce0 = 1'b1;
    end else begin
        line_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        line_buf_0_ce1 = 1'b1;
    end else begin
        line_buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_buf_0_d0 = line_buf_1_q1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_0_d0 = in_stream_V_dout;
    end else begin
        line_buf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_884 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond_flatten_reg_998 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        line_buf_0_we0 = 1'b1;
    end else begin
        line_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        line_buf_1_address0 = ap_reg_pp2_iter1_line_buf_1_addr_3_reg_1050;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buf_1_address0 = 64'd254;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        line_buf_1_address0 = tmp_4_fu_339_p1;
    end else begin
        line_buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_buf_1_address1 = tmp_s_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buf_1_address1 = 64'd255;
    end else begin
        line_buf_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buf_1_ce0 = 1'b1;
    end else begin
        line_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        line_buf_1_ce1 = 1'b1;
    end else begin
        line_buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp1_reg_1078 == 1'd1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((exitcond2_reg_893 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buf_1_we0 = 1'b1;
    end else begin
        line_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter3_exitcond_flatten_reg_998 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter3_exitcond_flatten_reg_998 == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond1_fu_310_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond1_fu_310_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond2_fu_327_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond2_fu_327_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond_flatten_fu_415_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((exitcond_flatten_fu_415_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond1_reg_884 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond1_reg_884 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond2_reg_893 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond2_reg_893 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((icmp1_reg_1078 == 1'd1) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((icmp1_reg_1078 == 1'd1) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((icmp1_reg_1078 == 1'd1) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)));
end

assign ap_block_state10_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp2_stage0_iter2 = ((icmp1_reg_1078 == 1'd1) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state12_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp2_stage0_iter4 = ((ap_reg_pp2_iter3_exitcond_flatten_reg_998 == 1'd0) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond1_reg_884 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((exitcond2_reg_893 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign brmerge_demorgan_i_0_1_fu_495_p2 = (tmp_i_mid2_fu_447_p3 & tmp1_fu_489_p2);

assign brmerge_demorgan_i_0_2_fu_521_p2 = (rev4_fu_515_p2 & brmerge_demorgan_i_0_1_fu_495_p2);

assign brmerge_demorgan_i_1_fu_629_p2 = (tmp_i1_mid2_fu_548_p3 & brmerge_demorgan_i_0_2_reg_1038);

assign brmerge_demorgan_i_2_fu_652_p2 = (tmp_i2_mid2_fu_573_p3 & brmerge_demorgan_i_1_fu_629_p2);

assign exitcond1_fu_310_p2 = ((ap_phi_mux_x_phi_fu_256_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond2_fu_327_p2 = ((ap_phi_mux_x1_phi_fu_268_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_415_p2 = ((indvar_flatten_reg_276 == 17'd65536) ? 1'b1 : 1'b0);

assign exitcond_fu_427_p2 = ((ap_phi_mux_x_assign_phi_fu_303_p4 == 9'd256) ? 1'b1 : 1'b0);

assign i_fu_375_p2 = (ap_phi_mux_y_assign_phi_fu_291_p4 + 9'd1);

assign icmp1_fu_668_p2 = (($signed(tmp_21_fu_658_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_fu_866_p2 = (($signed(tmp_19_fu_856_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_421_p2 = (indvar_flatten_reg_276 + 17'd1);

assign j_fu_469_p2 = (x_assign_mid2_fu_433_p3 + 9'd1);

assign or_cond1_i_fu_579_p2 = (tmp_i_mid2_reg_1013 & tmp_1_i_reg_1023);

assign out_stream_V_din = ((icmp_reg_1093[0:0] === 1'b1) ? tmp_14_reg_1087 : tmp_15_fu_872_p2);

assign p_neg_fu_816_p2 = (11'd0 - result_2_i_2_2_fu_802_p3);

assign p_shl_cast_fu_642_p1 = p_shl_fu_634_p3;

assign p_shl_fu_634_p3 = {{window_1_0_1_fu_146}, {1'd0}};

assign read_count_fu_680_p2 = (read_count_1_fu_122 + 32'd1);

assign result_0_2_fu_612_p2 = (tmp_15_0_2_cast_fu_608_p1 + result_2_i_0_0_s_fu_601_p3);

assign result_1_2_fu_744_p2 = (tmp_16_1_2_cast_fu_740_p1 + result_2_i_1_0_s_fu_727_p3);

assign result_1_fu_646_p2 = ($signed(result_2_i_0_2_cast_fu_625_p1) - $signed(p_shl_cast_fu_642_p1));

assign result_2_2_fu_778_p2 = (tmp_15_2_2_cast_fu_774_p1 + result_2_i_2_0_s_fu_767_p3);

assign result_2_fu_761_p2 = (result_2_i_1_2_fu_750_p3 - tmp_15_2_cast_fu_757_p1);

assign result_2_i_0_0_s_fu_601_p3 = ((brmerge_demorgan_i_0_1_reg_1033[0:0] === 1'b1) ? result_2_i_fu_593_p3 : 9'd0);

assign result_2_i_0_2_cast_fu_625_p1 = $signed(result_2_i_0_2_fu_618_p3);

assign result_2_i_0_2_fu_618_p3 = ((brmerge_demorgan_i_0_2_reg_1038[0:0] === 1'b1) ? result_0_2_fu_612_p2 : 9'd0);

assign result_2_i_1_0_s_fu_727_p3 = ((brmerge_demorgan_i_1_reg_1061[0:0] === 1'b1) ? result_1_reg_1067 : 11'd0);

assign result_2_i_1_2_fu_750_p3 = ((brmerge_demorgan_i_1_reg_1061[0:0] === 1'b1) ? result_1_2_fu_744_p2 : 11'd0);

assign result_2_i_2_0_s_fu_767_p3 = ((brmerge_demorgan_i_2_reg_1072[0:0] === 1'b1) ? result_2_fu_761_p2 : 11'd0);

assign result_2_i_2_2_fu_802_p3 = ((ap_reg_pp2_iter2_brmerge_demorgan_i_2_reg_1072[0:0] === 1'b1) ? result_2_2_reg_1082 : 11'd0);

assign result_2_i_fu_593_p3 = ((or_cond1_i_fu_579_p2[0:0] === 1'b1) ? tmp_8_fu_587_p2 : 9'd0);

assign rev1_fu_409_p2 = (tmp_6_fu_401_p3 ^ 1'd1);

assign rev2_fu_567_p2 = (tmp_10_fu_559_p3 ^ 1'd1);

assign rev3_fu_483_p2 = (tmp_16_fu_475_p3 ^ 1'd1);

assign rev4_fu_515_p2 = (tmp_17_fu_507_p3 ^ 1'd1);

assign rev_fu_389_p2 = (tmp_3_fu_381_p3 ^ 1'd1);

assign tmp1_fu_489_p2 = (tmp_1_i_fu_463_p2 & rev3_fu_483_p2);

assign tmp_10_fu_559_p3 = y_assign_2_mid1_fu_553_p2[32'd8];

assign tmp_11_fu_822_p4 = {{p_neg_fu_816_p2[9:2]}};

assign tmp_12_fu_832_p2 = (8'd0 - tmp_11_fu_822_p4);

assign tmp_13_fu_838_p4 = {{result_2_i_2_2_fu_802_p3[9:2]}};

assign tmp_14_fu_848_p3 = ((tmp_18_fu_808_p3[0:0] === 1'b1) ? tmp_12_fu_832_p2 : tmp_13_fu_838_p4);

assign tmp_151_cast_fu_583_p1 = window_0_0_1_fu_134;

assign tmp_15_0_2_cast_fu_608_p1 = window_0_1_fu_126;

assign tmp_15_2_2_cast_fu_774_p1 = window_2_1_1_fu_150;

assign tmp_15_2_cast_fu_757_p1 = window_2_0_1_fu_158;

assign tmp_15_fu_872_p2 = (8'd0 - tmp_14_reg_1087);

assign tmp_16_1_2_cast_fu_740_p1 = tmp_16_1_2_fu_733_p3;

assign tmp_16_1_2_fu_733_p3 = {{window_1_1_1_load_reg_1056}, {1'd0}};

assign tmp_16_fu_475_p3 = j_fu_469_p2[32'd8];

assign tmp_17_fu_507_p3 = x_assign_2_fu_501_p2[32'd8];

assign tmp_18_fu_808_p3 = result_2_i_2_2_fu_802_p3[32'd10];

assign tmp_19_fu_856_p4 = {{result_2_i_2_2_fu_802_p3[10:2]}};

assign tmp_1_fu_322_p1 = x_reg_252;

assign tmp_1_i_fu_463_p2 = ((x_assign_mid2_fu_433_p3 != 9'd0) ? 1'b1 : 1'b0);

assign tmp_21_fu_658_p4 = {{read_count_1_fu_122[31:16]}};

assign tmp_3_fu_381_p3 = i_fu_375_p2[32'd8];

assign tmp_4_fu_339_p1 = x1_reg_264;

assign tmp_6_fu_401_p3 = y_assign_2_fu_395_p2[32'd8];

assign tmp_8_fu_587_p2 = (9'd0 - tmp_151_cast_fu_583_p1);

assign tmp_i1_mid2_fu_548_p3 = ((exitcond_reg_1007[0:0] === 1'b1) ? rev1_reg_992 : rev_reg_987);

assign tmp_i2_mid2_fu_573_p3 = ((exitcond_reg_1007[0:0] === 1'b1) ? rev2_fu_567_p2 : rev1_reg_992);

assign tmp_i_fu_369_p2 = ((ap_phi_mux_y_assign_phi_fu_291_p4 != 9'd0) ? 1'b1 : 1'b0);

assign tmp_i_mid1_fu_441_p2 = ((i_fu_375_p2 != 9'd0) ? 1'b1 : 1'b0);

assign tmp_i_mid2_fu_447_p3 = ((exitcond_fu_427_p2[0:0] === 1'b1) ? tmp_i_mid1_fu_441_p2 : tmp_i_fu_369_p2);

assign tmp_s_fu_527_p1 = x_assign_mid2_fu_433_p3;

assign x_1_fu_316_p2 = (ap_phi_mux_x_phi_fu_256_p4 + 9'd1);

assign x_2_fu_333_p2 = (ap_phi_mux_x1_phi_fu_268_p4 + 9'd1);

assign x_assign_2_fu_501_p2 = (x_assign_mid2_fu_433_p3 + 9'd2);

assign x_assign_mid2_fu_433_p3 = ((exitcond_fu_427_p2[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_x_assign_phi_fu_303_p4);

assign y_assign_2_fu_395_p2 = (ap_phi_mux_y_assign_phi_fu_291_p4 + 9'd2);

assign y_assign_2_mid1_fu_553_p2 = (y_assign_reg_287 + 9'd3);

assign y_assign_mid2_fu_455_p3 = ((exitcond_fu_427_p2[0:0] === 1'b1) ? i_fu_375_p2 : ap_phi_mux_y_assign_phi_fu_291_p4);

endmodule //conv_3x3_strm
